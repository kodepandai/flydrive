var u=Object.defineProperty;var n=(s,t)=>u(s,"name",{value:t,configurable:!0});import{Storage as l}from"@google-cloud/storage";import{Storage as d,FileNotFound as w,isReadableStream as f,pipeline as g,UnknownException as y,WrongKeyPath as m,PermissionMissing as p,AuthorizationRequired as S}from"@kodepandai/flydrive";var _=Object.defineProperty,h=n((s,t)=>_(s,"name",{value:t,configurable:!0}),"c");function i(s,t){switch(s.code){case 401:return new S(s,t);case 403:return new p(s,t);case 404:return new w(s,t);case"ENOENT":return new m(s,t);default:return new y(s,String(s.code),t)}}n(i,"n"),h(i,"handleError");class c extends d{constructor(t){super(),this.$config=t;const e=l;this.$driver=new e(t),this.$bucket=this.$driver.bucket(t.bucket)}_file(t){return this.$bucket.file(t)}async copy(t,e){const r=this._file(t),a=this._file(e);try{return{raw:await r.copy(a)}}catch(o){throw i(o,t)}}async delete(t){try{return{raw:await this._file(t).delete(),wasDeleted:!0}}catch(e){const r=i(e,t);if(r instanceof w)return{raw:void 0,wasDeleted:!1};throw r}}driver(){return this.$driver}async exists(t){try{const e=await this._file(t).exists();return{exists:e[0],raw:e}}catch(e){throw i(e,t)}}async get(t,e="utf-8"){try{const r=await this._file(t).download();return{content:r[0].toString(e),raw:r}}catch(r){throw i(r,t)}}async getBuffer(t){try{const e=await this._file(t).download();return{content:e[0],raw:e}}catch(e){throw i(e,t)}}async getSignedUrl(t,e={}){const{expiry:r=900}=e;try{const a=await this._file(t).getSignedUrl({action:"read",expires:Date.now()+r*1e3});return{signedUrl:a[0],raw:a}}catch(a){throw i(a,t)}}async getStat(t){try{const e=await this._file(t).getMetadata();return{size:Number(e[0].size),modified:new Date(e[0].updated),raw:e}}catch(e){throw i(e,t)}}getStream(t){return this._file(t).createReadStream()}getUrl(t){return`https://storage.googleapis.com/${this.$bucket.name}/${t}`}async move(t,e){const r=this._file(t),a=this._file(e);try{return{raw:await r.move(a)}}catch(o){throw i(o,t)}}async put(t,e){const r=this._file(t);try{if(f(e)){const a=r.createWriteStream();return await g(e,a),{raw:void 0}}return{raw:await r.save(e,{resumable:!1})}}catch(a){throw i(a,t)}}async*flatList(t=""){let e={prefix:t,autoPaginate:!1,maxResults:1e3};do try{const r=await this.$bucket.getFiles(e);e=r[1];for(const a of r[0])yield{raw:a.metadata,path:a.name}}catch(r){throw i(r,t)}while(e)}}n(c,"GoogleCloudStorage"),h(c,"GoogleCloudStorage");export{c as GoogleCloudStorage};
