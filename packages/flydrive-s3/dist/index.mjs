var h=Object.defineProperty;var n=(s,t)=>h(s,"name",{value:t,configurable:!0});import d from"aws-sdk/clients/s3.js";import{Storage as w,UnknownException as y,PermissionMissing as $,FileNotFound as k,NoSuchBucket as b}from"@kodepandai/flydrive";var p=Object.defineProperty,u=n((s,t)=>p(s,"name",{value:t,configurable:!0}),"o");function i(s,t,r){switch(s.name){case"NoSuchBucket":return new b(s,r);case"NoSuchKey":return new k(s,t);case"AllAccessDisabled":return new $(s,t);default:return new y(s,s.name,t)}}n(i,"n"),u(i,"handleError");class o extends w{constructor(t){super(),this.$driver=new d({accessKeyId:t.key,secretAccessKey:t.secret,...t}),this.$bucket=t.bucket}async copy(t,r){const e={Key:r,Bucket:this.$bucket,CopySource:`/${this.$bucket}/${t}`};try{return{raw:await this.$driver.copyObject(e).promise()}}catch(c){throw i(c,t,this.$bucket)}}async delete(t){const r={Key:t,Bucket:this.$bucket};try{return{raw:await this.$driver.deleteObject(r).promise(),wasDeleted:null}}catch(e){throw i(e,t,this.$bucket)}}driver(){return this.$driver}async exists(t){const r={Key:t,Bucket:this.$bucket};try{return{exists:!0,raw:await this.$driver.headObject(r).promise()}}catch(e){if(e.statusCode===404)return{exists:!1,raw:e};throw i(e,t,this.$bucket)}}async get(t,r="utf-8"){const e=await this.getBuffer(t);return{content:e.content.toString(r),raw:e.raw}}async getBuffer(t){const r={Key:t,Bucket:this.$bucket};try{const e=await this.$driver.getObject(r).promise();return{content:e.Body,raw:e}}catch(e){throw i(e,t,this.$bucket)}}async getSignedUrl(t,r={}){const{expiry:e=900}=r;try{const c={Key:t,Bucket:this.$bucket,Expires:e},a=await this.$driver.getSignedUrlPromise("getObject",c);return{signedUrl:a,raw:a}}catch(c){throw i(c,t,this.$bucket)}}async getStat(t){const r={Key:t,Bucket:this.$bucket};try{const e=await this.$driver.headObject(r).promise();return{size:e.ContentLength,modified:e.LastModified,raw:e}}catch(e){throw i(e,t,this.$bucket)}}getStream(t){const r={Key:t,Bucket:this.$bucket};return this.$driver.getObject(r).createReadStream()}getUrl(t){const{href:r}=this.$driver.endpoint;return r.startsWith("https://s3.amazonaws")?`https://${this.$bucket}.s3.amazonaws.com/${t}`:`${r}${this.$bucket}/${t}`}async move(t,r){return await this.copy(t,r),await this.delete(t),{raw:void 0}}async put(t,r,e={}){const c={Key:t,Body:r,Bucket:this.$bucket,...e};try{return{raw:await this.$driver.upload(c).promise()}}catch(a){throw i(a,t,this.$bucket)}}async*flatList(t=""){let r;do try{const e=await this.$driver.listObjectsV2({Bucket:this.$bucket,Prefix:t,ContinuationToken:r,MaxKeys:1e3}).promise();r=e.NextContinuationToken;for(const c of e.Contents)yield{raw:c,path:c.Key}}catch(e){throw i(e,t,this.$bucket)}while(r)}}n(o,"AmazonWebServicesS3Storage"),u(o,"AmazonWebServicesS3Storage");export{o as AmazonWebServicesS3Storage};
